// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: rpkm67/backend/selection/v1/selection.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SelectionService_Create_FullMethodName          = "/rpkm67.backend.selection.v1.SelectionService/Create"
	SelectionService_FindByStudentId_FullMethodName = "/rpkm67.backend.selection.v1.SelectionService/FindByStudentId"
	SelectionService_Update_FullMethodName          = "/rpkm67.backend.selection.v1.SelectionService/Update"
)

// SelectionServiceClient is the client API for SelectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SelectionServiceClient interface {
	Create(ctx context.Context, in *CreateSelectionRequest, opts ...grpc.CallOption) (*CreateSelectionResponse, error)
	FindByStudentId(ctx context.Context, in *FindByStudentIdSelectionRequest, opts ...grpc.CallOption) (*FindByStudentIdSelectionResponse, error)
	Update(ctx context.Context, in *UpdateSelectionRequest, opts ...grpc.CallOption) (*UpdateSelectionResponse, error)
}

type selectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSelectionServiceClient(cc grpc.ClientConnInterface) SelectionServiceClient {
	return &selectionServiceClient{cc}
}

func (c *selectionServiceClient) Create(ctx context.Context, in *CreateSelectionRequest, opts ...grpc.CallOption) (*CreateSelectionResponse, error) {
	out := new(CreateSelectionResponse)
	err := c.cc.Invoke(ctx, SelectionService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionServiceClient) FindByStudentId(ctx context.Context, in *FindByStudentIdSelectionRequest, opts ...grpc.CallOption) (*FindByStudentIdSelectionResponse, error) {
	out := new(FindByStudentIdSelectionResponse)
	err := c.cc.Invoke(ctx, SelectionService_FindByStudentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionServiceClient) Update(ctx context.Context, in *UpdateSelectionRequest, opts ...grpc.CallOption) (*UpdateSelectionResponse, error) {
	out := new(UpdateSelectionResponse)
	err := c.cc.Invoke(ctx, SelectionService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SelectionServiceServer is the server API for SelectionService service.
// All implementations must embed UnimplementedSelectionServiceServer
// for forward compatibility
type SelectionServiceServer interface {
	Create(context.Context, *CreateSelectionRequest) (*CreateSelectionResponse, error)
	FindByStudentId(context.Context, *FindByStudentIdSelectionRequest) (*FindByStudentIdSelectionResponse, error)
	Update(context.Context, *UpdateSelectionRequest) (*UpdateSelectionResponse, error)
	mustEmbedUnimplementedSelectionServiceServer()
}

// UnimplementedSelectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSelectionServiceServer struct {
}

func (UnimplementedSelectionServiceServer) Create(context.Context, *CreateSelectionRequest) (*CreateSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSelectionServiceServer) FindByStudentId(context.Context, *FindByStudentIdSelectionRequest) (*FindByStudentIdSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByStudentId not implemented")
}
func (UnimplementedSelectionServiceServer) Update(context.Context, *UpdateSelectionRequest) (*UpdateSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSelectionServiceServer) mustEmbedUnimplementedSelectionServiceServer() {}

// UnsafeSelectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SelectionServiceServer will
// result in compilation errors.
type UnsafeSelectionServiceServer interface {
	mustEmbedUnimplementedSelectionServiceServer()
}

func RegisterSelectionServiceServer(s grpc.ServiceRegistrar, srv SelectionServiceServer) {
	s.RegisterService(&SelectionService_ServiceDesc, srv)
}

func _SelectionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionServiceServer).Create(ctx, req.(*CreateSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionService_FindByStudentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByStudentIdSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionServiceServer).FindByStudentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionService_FindByStudentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionServiceServer).FindByStudentId(ctx, req.(*FindByStudentIdSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionServiceServer).Update(ctx, req.(*UpdateSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SelectionService_ServiceDesc is the grpc.ServiceDesc for SelectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SelectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpkm67.backend.selection.v1.SelectionService",
	HandlerType: (*SelectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SelectionService_Create_Handler,
		},
		{
			MethodName: "FindByStudentId",
			Handler:    _SelectionService_FindByStudentId_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SelectionService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpkm67/backend/selection/v1/selection.proto",
}
