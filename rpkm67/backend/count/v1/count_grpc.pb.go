// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: rpkm67/backend/count/v1/count.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CountService_FindAll_FullMethodName = "/rpkm67.backend.count.v1.CountService/FindAll"
	CountService_Create_FullMethodName  = "/rpkm67.backend.count.v1.CountService/Create"
)

// CountServiceClient is the client API for CountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CountServiceClient interface {
	FindAll(ctx context.Context, in *FindAllCountRequest, opts ...grpc.CallOption) (*FindAllCountResponse, error)
	Create(ctx context.Context, in *CreateCountRequest, opts ...grpc.CallOption) (*CreateCountResponse, error)
}

type countServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCountServiceClient(cc grpc.ClientConnInterface) CountServiceClient {
	return &countServiceClient{cc}
}

func (c *countServiceClient) FindAll(ctx context.Context, in *FindAllCountRequest, opts ...grpc.CallOption) (*FindAllCountResponse, error) {
	out := new(FindAllCountResponse)
	err := c.cc.Invoke(ctx, CountService_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countServiceClient) Create(ctx context.Context, in *CreateCountRequest, opts ...grpc.CallOption) (*CreateCountResponse, error) {
	out := new(CreateCountResponse)
	err := c.cc.Invoke(ctx, CountService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountServiceServer is the server API for CountService service.
// All implementations must embed UnimplementedCountServiceServer
// for forward compatibility
type CountServiceServer interface {
	FindAll(context.Context, *FindAllCountRequest) (*FindAllCountResponse, error)
	Create(context.Context, *CreateCountRequest) (*CreateCountResponse, error)
	mustEmbedUnimplementedCountServiceServer()
}

// UnimplementedCountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCountServiceServer struct {
}

func (UnimplementedCountServiceServer) FindAll(context.Context, *FindAllCountRequest) (*FindAllCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedCountServiceServer) Create(context.Context, *CreateCountRequest) (*CreateCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCountServiceServer) mustEmbedUnimplementedCountServiceServer() {}

// UnsafeCountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CountServiceServer will
// result in compilation errors.
type UnsafeCountServiceServer interface {
	mustEmbedUnimplementedCountServiceServer()
}

func RegisterCountServiceServer(s grpc.ServiceRegistrar, srv CountServiceServer) {
	s.RegisterService(&CountService_ServiceDesc, srv)
}

func _CountService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CountService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServiceServer).FindAll(ctx, req.(*FindAllCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CountService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CountService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServiceServer).Create(ctx, req.(*CreateCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CountService_ServiceDesc is the grpc.ServiceDesc for CountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpkm67.backend.count.v1.CountService",
	HandlerType: (*CountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _CountService_FindAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CountService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpkm67/backend/count/v1/count.proto",
}
